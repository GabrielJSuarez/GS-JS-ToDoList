(()=>{"use strict";class e{constructor(e){this.title=e}}const t=document.forms["project-form"];t.addEventListener("submit",(e=>{e.preventDefault()}));const r={addProject:r=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(r=>{const s=t.querySelector("#project-title").value,i=new e(s);r.push(i)})(r),(e=>{const t=document.querySelector("#project-list");t.innerHTML='\n          <li class="list-group-item list-group-item-dark" id="project-list">All Projects</li>\n        ';for(let r=0;r<e.length;r++)t.innerHTML+=`\n        <li class="list-group-item list-group-item-dark" id="project-list">${e[r].title}</li>\n      `})(r),document.querySelector("#project-form").reset()}))},displayProjectTasks:e=>{const t=document.querySelector("#project-list");t.addEventListener("click",(r=>{const s=r.target.textContent;((e,t)=>{const r=e.target;[...t.children].forEach((function(e){e.classList.remove("active")})),r.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(r,t),(e=>{const t=document.querySelector("#project");t.innerHTML="",t.innerHTML+=`\n        <input type="hidden" value="${e}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(s),((e,t)=>{const r=document.querySelector("#tasks-list");r.innerHTML="";const s=document.querySelector("#add-task");if("All Projects"===e){s.classList.add("d-none");for(let e=0;e<t.length;e++)r.innerHTML+=`\n            <li class="list-group-item list-group-item-dark">${t[e].title}</li>\n          `}else{s.classList.remove("d-none");let i=t.filter((t=>t.project===e));for(let e=0;e<i.length;e++)r.innerHTML+=`\n            <li class="list-group-item list-group-item-dark">${i[e].title}</li>\n          `}})(s,e)}))}};class s{constructor(e,t,r,s,i="default"){this.title=e,this.description=t,this.dueDate=r,this.priority=s,this.project=i}}const i=document.forms["tasks-form"];i.addEventListener("submit",(e=>{e.preventDefault()}));const o={createNewTask:e=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const t=i.querySelector("#task-name").value,r=i.querySelector("#task-description").value,o=i.querySelector("#task-date").value,c=i.querySelector("#task-priority").value,l=i.querySelector("#task-project").value;((e,t,r,i,o,c)=>{const l=new s(t,r,i,o,c);e.push(l)})(e,t,r,o,c,l),((e,t)=>{const r=document.querySelector("#tasks-list");r.innerHTML="";let s=t.filter((t=>t.project===e));for(let e=0;e<s.length;e++)r.innerHTML+=`\n          <li class="list-group-item list-group-item-dark">${s[e].title}</li>\n        `})(l,e),document.querySelector("#tasks-form").reset()}))}},c=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"Low",project:"Project 1"},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"Medium",project:"Project 2"},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"Medium",project:"Project 3"}];r.addProject([],c),r.displayProjectTasks(c),o.createNewTask(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,