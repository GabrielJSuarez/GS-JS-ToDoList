(()=>{"use strict";class t{constructor(t){this.title=t}}const e=document.forms["project-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const s=(()=>{const s=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{addProject:s=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(s=>{const i=e.querySelector("#project-title").value,n=new t(i);s.push(n)})(s),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n          <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s++)e.innerHTML+=`\n        <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n      `})(s),document.querySelector("#project-form").reset()}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(i=>{const n=i.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((function(t){t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(n),((t,e)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";const n=document.querySelector("#add-task"),l=document.querySelector("#multiCollapseExample2");if("All Projects"===t){n.classList.add("d-none"),l.classList.add("d-none");for(let t=0;t<e.length;t++){let n=s(e,t);i.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${n} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                          ${e[t].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${t}">\n                        <div class="card card-body bg-${n} mb-4">\n                          <ul class="list-group">\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Description</span>: ${e[t].description}</li>\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Due Date</span>: ${e[t].dueDate}</li>\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Priority</span>: ${e[t].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}else{n.classList.remove("d-none"),l.classList.remove("d-none");let r=e.filter((e=>e.project===t));for(let t=0;t<r.length;t++){let e=s(r,t);i.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                          ${r[t].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${t}">\n                        <div class="card card-body bg-${e} mb-4">\n                          <ul class="list-group ">\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${r[t].description}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${r[t].dueDate}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${r[t].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}})(n,t)}))}}})();class i{constructor(t,e,s,i,n="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=i,this.project=n}}const n=document.forms["tasks-form"];n.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{createNewTask:e=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const s=n.querySelector("#task-name").value,l=n.querySelector("#task-description").value,r=n.querySelector("#task-date").value,a=n.querySelector("#task-priority").value,o=n.querySelector("#task-project").value;((t,e,s,n,l,r)=>{const a=new i(e,s,n,l,r);t.push(a)})(e,s,l,r,a,o),((e,s)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";let n=s.filter((t=>t.project===e));for(let e=0;e<n.length;e++){let s=t(n,e);i.innerHTML+=`\n              <li class="">\n                  <p>\n                    <button class="btn btn-${s} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                      ${n[e].title}\n                    </button>\n                  </p>\n                    \n                  <div class="collapse" id="task-${e}">\n                    <div class="card card-body bg-${s} mb-4">\n                      <ul class="list-group ">\n                          <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Description</span>: ${n[e].description}</li>\n                          <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Due Date</span>: ${n[e].dueDate}</li>\n                          <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Priority</span>: ${n[e].priority}</li>\n                      </ul>\n                    </div>\n                  </div>\n              </li>\n            `}})(o,e),document.querySelector("#tasks-form").reset()}))}}})(),r=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1"},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2"},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3"}];s.addProject([],r),s.displayProjectTasks(r),l.createNewTask(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,