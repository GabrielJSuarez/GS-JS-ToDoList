(()=>{"use strict";class t{constructor(t,e,s,i,n="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=i,this.project=n}}const e=document.forms["tasks-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const s=(()=>{const s=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{createNewTask:i=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const n=e.querySelector("#task-name").value,l=e.querySelector("#task-description").value,r=e.querySelector("#task-date").value,a=e.querySelector("#task-priority").value,o=e.querySelector("#task-project").value;((e,s,i,n,l,r)=>{const a=new t(s,i,n,l,r);e.push(a)})(i,n,l,r,a,o),((t,e)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";let n=e.filter((e=>e.project===t));for(let t=0;t<n.length;t++){let e=s(n,t);i.innerHTML+=`\n              <li class="">\n                  <p>\n                    <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                      ${n[t].title}\n                    </button>\n                  </p>\n                    \n                  <div class="collapse" id="task-${t}">\n                    <div class="card card-body bg-${e} mb-4">\n                      <ul class="list-group ">\n                          <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${n[t].description}</li>\n                          <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${n[t].dueDate}</li>\n                          <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${n[t].priority}</li>\n                      </ul>\n                    </div>\n                  </div>\n              </li>\n            `}})(o,i),document.querySelector("#tasks-form").reset()}))}}})();class i{constructor(t){this.title=t}}const n=document.forms["project-form"];n.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{addProject:t=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(t=>{const e=n.querySelector("#project-title").value,s=new i(e);t.push(s)})(t),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n          <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s++)e.innerHTML+=`\n        <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n      `})(t),document.querySelector("#project-form").reset()}))},displayProjectTasks:e=>{const s=document.querySelector("#project-list");s.addEventListener("click",(i=>{const n=i.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((function(t){t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,s),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(n),((e,s)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";const n=document.querySelector("#add-task");if("All Projects"===e){n.classList.add("d-none");for(let e=0;e<s.length;e++){let n=t(s,e);i.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${n} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                          ${s[e].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${e}">\n                        <div class="card card-body bg-${n} mb-4">\n                          <ul class="list-group">\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Description</span>: ${s[e].description}</li>\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Due Date</span>: ${s[e].dueDate}</li>\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Priority</span>: ${s[e].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}else{n.classList.remove("d-none");let l=s.filter((t=>t.project===e));for(let e=0;e<l.length;e++){let n=t(s,e);i.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${n} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                          ${l[e].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${e}">\n                        <div class="card card-body bg-${n} mb-4">\n                          <ul class="list-group ">\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Description</span>: ${l[e].description}</li>\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Due Date</span>: ${l[e].dueDate}</li>\n                              <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Priority</span>: ${l[e].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}})(n,e)}))}}})(),r=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1"},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2"},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3"}];l.addProject([],r),l.displayProjectTasks(r),s.createNewTask(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,